// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace webapi.Models
{
    public partial class TriangleContext : DbContext
    {
        public TriangleContext()
        {
        }

        public TriangleContext(DbContextOptions<TriangleContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AptitudeTest> AptitudeTest { get; set; }
        public virtual DbSet<Article> Article { get; set; }
        public virtual DbSet<Candidate> Candidate { get; set; }
        public virtual DbSet<CandidateCv> CandidateCv { get; set; }
        public virtual DbSet<CandidateSkill> CandidateSkill { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseDetail> CourseDetail { get; set; }
        public virtual DbSet<CourseOrder> CourseOrder { get; set; }
        public virtual DbSet<Cv> Cv { get; set; }
        public virtual DbSet<Enterprise> Enterprise { get; set; }
        public virtual DbSet<InterestedArticle> InterestedArticle { get; set; }
        public virtual DbSet<InterestedCourse> InterestedCourse { get; set; }
        public virtual DbSet<InterestedCv> InterestedCv { get; set; }
        public virtual DbSet<InterestedEnterprise> InterestedEnterprise { get; set; }
        public virtual DbSet<InterestedPlatformArticle> InterestedPlatformArticle { get; set; }
        public virtual DbSet<Platform> Platform { get; set; }
        public virtual DbSet<Reply> Reply { get; set; }
        public virtual DbSet<Result> Result { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<Vacancy> Vacancy { get; set; }
        public virtual DbSet<VacancySkill> VacancySkill { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AptitudeTest>(entity =>
            {
                entity.HasKey(e => e.QuestionId);

                entity.Property(e => e.Question).HasMaxLength(100);
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.Property(e => e.Img)
                    .HasMaxLength(100)
                    .HasColumnName("img");

                entity.Property(e => e.Keyword).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UpdateTime).HasColumnType("date");
            });

            modelBuilder.Entity<Candidate>(entity =>
            {
                entity.Property(e => e.Account).HasMaxLength(12);

                entity.Property(e => e.Address).HasMaxLength(30);

                entity.Property(e => e.Autobiography).HasMaxLength(700);

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.Cellphone).HasMaxLength(10);

                entity.Property(e => e.Education).HasMaxLength(30);

                entity.Property(e => e.IdCard).HasMaxLength(10);

                entity.Property(e => e.Img).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(10);

                entity.Property(e => e.Password).HasMaxLength(12);

                entity.Property(e => e.Telephone).HasMaxLength(10);
            });

            modelBuilder.Entity<CandidateCv>(entity =>
            {
                entity.ToTable("CandidateCV");

                entity.Property(e => e.CandidateCvid).HasColumnName("CandidateCVId");

                entity.Property(e => e.Cvid).HasColumnName("CVId");

                entity.Property(e => e.Cvsource)
                    .HasMaxLength(100)
                    .HasColumnName("CVSource");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.Addedtime).HasColumnType("date");

                entity.Property(e => e.Img)
                    .HasMaxLength(200)
                    .HasColumnName("img");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(500)
                    .HasColumnName("keyword");

                entity.Property(e => e.Name).HasMaxLength(10);

                entity.Property(e => e.TeacherId).HasColumnName("TeacherID");

                entity.Property(e => e.TeacherName).HasMaxLength(10);

                entity.Property(e => e.Website)
                    .HasMaxLength(20)
                    .HasColumnName("website");
            });

            modelBuilder.Entity<CourseDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<CourseOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.Property(e => e.Buyingtime).HasColumnType("date");
            });

            modelBuilder.Entity<Cv>(entity =>
            {
                entity.ToTable("CV");

                entity.Property(e => e.Cvid).HasColumnName("CVId");

                entity.Property(e => e.Img).HasMaxLength(100);

                entity.Property(e => e.Source).HasMaxLength(100);
            });

            modelBuilder.Entity<Enterprise>(entity =>
            {
                entity.Property(e => e.Account).HasMaxLength(12);

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.ContactPhone).HasMaxLength(10);

                entity.Property(e => e.Email).HasMaxLength(20);

                entity.Property(e => e.Fax).HasMaxLength(10);

                entity.Property(e => e.Img)
                    .HasMaxLength(100)
                    .HasColumnName("img");

                entity.Property(e => e.Info).HasMaxLength(200);

                entity.Property(e => e.Password).HasMaxLength(12);

                entity.Property(e => e.Principal).HasMaxLength(10);

                entity.Property(e => e.Telephone).HasMaxLength(10);

                entity.Property(e => e.UniformNumbers).HasMaxLength(10);
            });

            modelBuilder.Entity<InterestedArticle>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.ArticleId })
                    .HasName("PK_InterestedArticle_1");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<InterestedCourse>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.CourseId })
                    .HasName("PK_InterestedCourse_1");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<InterestedCv>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.Cvid })
                    .HasName("PK_InterestedCV_1");

                entity.ToTable("InterestedCV");

                entity.HasIndex(e => new { e.CandidateId, e.Cvid }, "IX_InterestedCV");

                entity.Property(e => e.Cvid).HasColumnName("CVId");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<InterestedEnterprise>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.EnterpriseId })
                    .HasName("PK_InterestedEnterprise_1");

                entity.HasIndex(e => new { e.CandidateId, e.EnterpriseId }, "IX_InterestedEnterprise");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<InterestedPlatformArticle>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.PlatformArticleId });

                entity.HasIndex(e => new { e.CandidateId, e.PlatformArticleId }, "IX_InterestedPlatformArticle");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<Platform>(entity =>
            {
                entity.HasKey(e => e.ArticleId);

                entity.Property(e => e.ArticleName).HasMaxLength(10);

                entity.Property(e => e.Contents).HasMaxLength(500);

                entity.Property(e => e.UpdateTime).HasColumnType("date");
            });

            modelBuilder.Entity<Reply>(entity =>
            {
                entity.Property(e => e.ReplyTime).HasColumnType("date");
            });

            modelBuilder.Entity<Result>(entity =>
            {
                entity.Property(e => e.AnswerTime).HasColumnType("date");

                entity.Property(e => e.Result1)
                    .HasMaxLength(500)
                    .HasColumnName("Result");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.Property(e => e.SkillName).HasMaxLength(50);
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.Property(e => e.Categories).HasMaxLength(50);

                entity.Property(e => e.EntryTime).HasColumnType("date");

                entity.Property(e => e.Experience).HasMaxLength(100);

                entity.Property(e => e.Img)
                    .HasMaxLength(100)
                    .HasColumnName("img");

                entity.Property(e => e.Name).HasMaxLength(10);
            });

            modelBuilder.Entity<Vacancy>(entity =>
            {
                entity.Property(e => e.Category).HasMaxLength(10);

                entity.Property(e => e.Shift).HasMaxLength(10);

                entity.Property(e => e.Updatetime)
                    .HasColumnType("date")
                    .HasColumnName("updatetime");

                entity.Property(e => e.WorkContent).HasMaxLength(50);

                entity.Property(e => e.WorkName).HasMaxLength(50);

                entity.Property(e => e.WorkPlace).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}